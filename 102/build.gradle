/*
 * xnat-template-plugin: build.gradle
 * XNAT https://www.xnat.org
 * Copyright (c) 2005-2021, Washington University School of Medicine
 * All Rights Reserved
 *
 * Released under the Simplified BSD.
 */

buildscript {
    ext {
        vXnat = "1.8.2.2"
    }
}

// TODO: This is the minimum set of Gradle plugins required to build most XNAT plugins.
//       You may include many others, including plugins for testing and test coverage,
//       IDE integration, and more.
plugins {
    id "jacoco"
    id "java"
    id "io.franzbecker.gradle-lombok" version "4.0.0"
    id "io.spring.dependency-management" version "1.0.11.RELEASE"
    id "org.nrg.xnat.build.xnat-data-builder" version "1.8.2"
}

version "0.1.0"
description "XNAT Plugin 102"

// TODO: This provides access to all of these repositories for dependency resolution.
repositories {
    mavenLocal()
    maven { url "https://nrgxnat.jfrog.io/nrgxnat/libs-release" }
    maven { url "https://nrgxnat.jfrog.io/nrgxnat/libs-snapshot" }
    mavenCentral()
}

// TODO: This defines a dependency package, specifically the XNAT NRG parent pom, which specifies
//       versions for all of XNAT's dependencies. This helps ensure that plugins are building
//       against the same versions of various libraries as XNAT itself.
dependencyManagement.imports {
    mavenBom "org.nrg:parent:1.8.2.2"
}

// TODO: This is a pretty minimal set of dependencies, so don't worry if you need to add more.
dependencies {
    implementation enforcedPlatform("org.nrg:parent:${vXnat}")

    implementation("org.nrg.xnat:web") {
        transitive = false
    }
    implementation "org.nrg.xdat:core"
    implementation "org.nrg:framework"

    compileOnly "log4j:log4j"
}

configurations {
    all {
        exclude group: "junit"
        exclude group: "net.logstash.logback"
        exclude group: "org.nrg.xnat.pipeline"
        exclude group: "org.slf4j", module: "jcl-over-slf4j"
        exclude group: "org.slf4j", module: "log4j-over-slf4j"
        exclude group: "org.slf4j", module: "slf4j-log4j12"
        exclude group: "org.slf4j", module: "slf4j-simple"
    }
    implementation.extendsFrom(implementAndInclude)
}

lombok {
    version = dependencyManagement.importedProperties["lombok.version"] as String
    sha256 = dependencyManagement.importedProperties["lombok.checksum"] as String
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled = false
        csv.enabled = true
        html.enabled = true
    }
}

java {
    // TODO: As of the 1.8.x release, XNAT is built as a Java 8-compatible (i.e. JDK 1.8)
    //       application. All plugins must be 1.8 compatible as well. This does NOT mean
    //       the code must be compiled with Java 8, just that the compiled byte code must
    //       be compatible with running in a Java 8 environment.
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

// Pulls in the Jenkins BUILD_NUMBER environment variable if available.
def buildDate = new Date()
def buildNumber = System.getenv().BUILD_NUMBER?.toInteger() ?: "Manual"

ext.gitManifest = manifest {
    attributes "Application-Name": project.description,
            "Build-Date": buildDate
}

logger.info """
Building artifacts with manifest attributes:

 * Build-Date:              ${buildDate}
"""

task sourceJar(type: Jar, dependsOn: classes) {
    classifier "sources"
    manifest {
        from gitManifest
    }
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    classifier "javadoc"
    manifest {
        from gitManifest
    }
    from javadoc.destinationDir
}

jar {
    dependsOn test, sourceJar, javadocJar
    enabled = true
    manifest {
        from gitManifest
    }
}

task xnatPluginJar(type: Jar) {
    dependsOn test, sourceJar, javadocJar
    zip64 true
    archiveClassifier.set "xpl"
    manifest {
        from gitManifest
    }
    // files and folders with "-dev" or "--xx" in their name
    // will not be in the compiled jar
    exclude "**/resources/**/*-dev**"
    exclude "**/resources/**/*--xx**"
    from {
        configurations.implementAndInclude.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    with jar
}
